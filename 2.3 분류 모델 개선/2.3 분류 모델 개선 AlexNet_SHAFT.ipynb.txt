{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Buz20EnPAwLy"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tNLgoAzLC365",
        "outputId": "5c2d4cba-aaed-4b6f-d0b2-b5da599c383d"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import cv2\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from sklearn.metrics import confusion_matrix, f1_score, precision_score, recall_score\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# 경로 설정\n",
        "train_fail_dir = '/content/drive/MyDrive/data/태림산업 이미지셋/Processed_Data_SHAFT/iteration_1/train/fail'\n",
        "train_pass_dir = '/content/drive/MyDrive/data/태림산업 이미지셋/Processed_Data_SHAFT/iteration_1/train/pass'\n",
        "test_fail_dir = '/content/drive/MyDrive/data/태림산업 이미지셋/Processed_Data_SHAFT/iteration_1/Test/fail'\n",
        "test_pass_dir = '/content/drive/MyDrive/data/태림산업 이미지셋/Processed_Data_SHAFT/iteration_1/Test/pass'\n",
        "\n",
        "# 이미지 로드 및 레이블 생성\n",
        "def load_images_from_folder(folder, label):\n",
        "    images = []\n",
        "    for filename in os.listdir(folder):\n",
        "        if filename.endswith('.bmp'):\n",
        "            img_path = os.path.join(folder, filename)\n",
        "            img = cv2.imread(img_path)\n",
        "            img = cv2.resize(img, (128, 128))  # 이미지 크기 조정\n",
        "            img = img / 255.0  # 이미지 정규화\n",
        "            images.append((img, label))\n",
        "    return images\n",
        "\n",
        "# 데이터 불러오기\n",
        "train_fail_images = load_images_from_folder(train_fail_dir, 0)\n",
        "train_pass_images = load_images_from_folder(train_pass_dir, 1)\n",
        "test_fail_images = load_images_from_folder(test_fail_dir, 0)\n",
        "test_pass_images = load_images_from_folder(test_pass_dir, 1)\n",
        "\n",
        "# 훈련 및 테스트 데이터셋 결합\n",
        "train_dataset = train_fail_images + train_pass_images\n",
        "test_dataset = test_fail_images + test_pass_images\n",
        "\n",
        "# 이미지와 레이블 분리\n",
        "X_train, y_train = zip(*train_dataset)\n",
        "X_test, y_test = zip(*test_dataset)\n",
        "\n",
        "X_train = np.array(X_train)\n",
        "y_train = np.array(y_train)\n",
        "X_test = np.array(X_test)\n",
        "y_test = np.array(y_test)\n",
        "\n",
        "# 원-핫 인코딩\n",
        "y_train = to_categorical(y_train, num_classes=2)\n",
        "y_test = to_categorical(y_test, num_classes=2)\n",
        "\n",
        "# AlexNet 모델 정의\n",
        "model = Sequential([\n",
        "    Conv2D(96, (11, 11), strides=4, activation='relu', input_shape=(128, 128, 3)),\n",
        "    MaxPooling2D((3, 3), strides=2),\n",
        "    Conv2D(256, (5, 5), activation='relu', padding='same'),\n",
        "    MaxPooling2D((3, 3), strides=2),\n",
        "    Conv2D(384, (3, 3), activation='relu', padding='same'),\n",
        "    Conv2D(384, (3, 3), activation='relu', padding='same'),\n",
        "    Conv2D(256, (3, 3), activation='relu', padding='same'),\n",
        "    MaxPooling2D((3, 3), strides=2),\n",
        "    Flatten(),\n",
        "    Dense(4096, activation='relu'),\n",
        "    Dropout(0.5),\n",
        "    Dense(4096, activation='relu'),\n",
        "    Dropout(0.5),\n",
        "    Dense(2, activation='softmax')\n",
        "])\n",
        "\n",
        "# 모델 컴파일\n",
        "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# 모델 학습\n",
        "history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))\n",
        "\n",
        "# 테스트 데이터 평가\n",
        "test_loss, test_accuracy = model.evaluate(X_test, y_test)\n",
        "print(f\"Test accuracy: {test_accuracy * 100:.2f}%\")\n",
        "\n",
        "# 예측 및 성능 평가\n",
        "y_test_pred = model.predict(X_test)\n",
        "y_test_pred_classes = np.argmax(y_test_pred, axis=1)\n",
        "y_test_true = np.argmax(y_test, axis=1)\n",
        "\n",
        "# 혼동 행렬 및 F1 점수 계산\n",
        "test_cm = confusion_matrix(y_test_true, y_test_pred_classes)\n",
        "f1 = f1_score(y_test_true, y_test_pred_classes)\n",
        "precision = precision_score(y_test_true, y_test_pred_classes)\n",
        "recall = recall_score(y_test_true, y_test_pred_classes)\n",
        "\n",
        "print(f\"F1 Score: {f1:.4f}\")\n",
        "print(f\"Precision: {precision:.4f}\")\n",
        "print(f\"Recall: {recall:.4f}\")\n",
        "\n",
        "# 혼동 행렬 시각화\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(test_cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Fail', 'Pass'], yticklabels=['Fail', 'Pass'])\n",
        "plt.ylabel('Actual')\n",
        "plt.xlabel('Predicted')\n",
        "plt.title('Confusion Matrix - AlexNet')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "awuhticjDDRe",
        "outputId": "f144327f-d0dd-4758-fbf0-460332f3ce4f"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m61s\u001b[0m 2s/step - accuracy: 0.8738 - loss: 0.3219 - val_accuracy: 0.9421 - val_loss: 0.2215\n",
            "Epoch 2/10\n",
            "\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m88s\u001b[0m 2s/step - accuracy: 0.9547 - loss: 0.1837 - val_accuracy: 0.9421 - val_loss: 0.3205\n",
            "Epoch 3/10\n",
            "\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m60s\u001b[0m 2s/step - accuracy: 0.9555 - loss: 0.1508 - val_accuracy: 0.9421 - val_loss: 0.4695\n",
            "Epoch 4/10\n",
            "\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 2s/step - accuracy: 0.9586 - loss: 0.1383 - val_accuracy: 0.9730 - val_loss: 0.1615\n",
            "Epoch 5/10\n",
            "\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m59s\u001b[0m 2s/step - accuracy: 0.9849 - loss: 0.0754 - val_accuracy: 0.9768 - val_loss: 0.1995\n",
            "Epoch 6/10\n",
            "\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 2s/step - accuracy: 0.9924 - loss: 0.0299 - val_accuracy: 0.9730 - val_loss: 0.5738\n",
            "Epoch 7/10\n",
            "\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m58s\u001b[0m 2s/step - accuracy: 0.9871 - loss: 0.0522 - val_accuracy: 0.9691 - val_loss: 0.1994\n",
            "Epoch 8/10\n",
            "\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 2s/step - accuracy: 0.9944 - loss: 0.0337 - val_accuracy: 0.9768 - val_loss: 0.2988\n",
            "Epoch 9/10\n",
            "\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 2s/step - accuracy: 0.9959 - loss: 0.0197 - val_accuracy: 0.9730 - val_loss: 0.3020\n",
            "Epoch 10/10\n",
            "\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 2s/step - accuracy: 0.9976 - loss: 0.0080 - val_accuracy: 0.9768 - val_loss: 0.6513\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 272ms/step - accuracy: 0.9444 - loss: 1.5627\n",
            "Test accuracy: 97.68%\n",
            "\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 388ms/step\n",
            "F1 Score: 0.9879\n",
            "Precision: 0.9760\n",
            "Recall: 1.0000\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAokAAAIjCAYAAABvUIGpAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABC/klEQVR4nO3dfXzN9f/H8efZ2NmMbYaZKWPm+jpKQshyrVyURDVCEfm6LvWVq7LoyvXVVy4KlShfV4mIfdVSkfIV5SryZS5jbWzYPr8/3Jyf0xtt7Oyc7Tzu39vndnM+53M+n9c56/i+PN/vz3s2y7IsAQAAANfwcXcBAAAA8Dw0iQAAADDQJAIAAMBAkwgAAAADTSIAAAAMNIkAAAAw0CQCAADAQJMIAAAAA00iAAAADDSJQA7Yu3evmjVrpuDgYNlsNi1fvjxbz//bb7/JZrNp/vz52Xre3Kxx48Zq3Lixu8sAgFyLJhFeY//+/Xr22WcVFRUlf39/BQUFqX79+po0aZIuXLjg0mvHxsZq586deu211/T++++rTp06Lr1eTurWrZtsNpuCgoKu+znu3btXNptNNptNb775ZpbPf/ToUY0aNUo7duzIhmpda9SoUY73erMtu5rXNWvWaNSoUZk+vnHjxo4afHx8FBQUpAoVKujJJ5/U+vXrb6uW6dOn848UII/J5+4CgJywevVqPfroo7Lb7XrqqadUtWpVXbx4UVu2bNHQoUO1a9cuzZ492yXXvnDhghISEvTyyy+rX79+LrlGZGSkLly4oPz587vk/H8nX758On/+vFauXKlOnTo5Pbdo0SL5+/srNTX1ls599OhRjR49WqVLl1bNmjUz/bp169bd0vVuR4cOHRQdHe14nJycrD59+qh9+/bq0KGDY3/x4sWz5Xpr1qzRtGnTstQo3nHHHYqLi5MkpaSkaN++ffrkk0+0cOFCderUSQsXLryl/46mT5+uokWLqlu3bll+LQDPRJOIPO/gwYPq3LmzIiMjtXHjRpUoUcLxXN++fbVv3z6tXr3aZdc/efKkJCkkJMRl17DZbPL393fZ+f+O3W5X/fr19cEHHxhN4uLFi9W6dWstW7YsR2o5f/68ChQoID8/vxy53rWqV6+u6tWrOx6fOnVKffr0UfXq1fXEE0/keD3XExwcbNTy+uuvq3///po+fbpKly6t8ePHu6k6AJ6E4WbkeRMmTFBycrLeffddpwbxqujoaP3jH/9wPL58+bLGjh2rsmXLym63q3Tp0nrppZeUlpbm9LrSpUurTZs22rJli+655x75+/srKipK7733nuOYUaNGKTIyUpI0dOhQ2Ww2lS5dWtKVYdqrf77W1SHLa61fv14NGjRQSEiIChYsqAoVKuill15yPH+jOYkbN25Uw4YNFRgYqJCQED388MPavXv3da+3b98+devWTSEhIQoODlb37t11/vz5G3+wf9GlSxd99tlnOnv2rGPfd999p71796pLly7G8WfOnNGQIUNUrVo1FSxYUEFBQWrZsqV+/PFHxzGbNm3S3XffLUnq3r27Y6j06vts3Lixqlatqm3btun+++9XgQIFHJ/LX+ckxsbGyt/f33j/zZs3V+HChXX06NFMv9fbtWfPHj3yyCMKDQ2Vv7+/6tSpoxUrVjgdc+nSJY0ePVrlypWTv7+/ihQpogYNGjiGhbt166Zp06ZJktNQ9q3w9fXV5MmTVblyZU2dOlXnzp1zPDdv3jw98MADCgsLk91uV+XKlTVjxgyn15cuXVq7du3S5s2bjSH1zPycAXgmkkTkeStXrlRUVJTuu+++TB3fs2dPLViwQI888ogGDx6srVu3Ki4uTrt379ann37qdOy+ffv0yCOPqEePHoqNjdXcuXPVrVs31a5dW1WqVFGHDh0UEhKigQMH6vHHH1erVq1UsGDBLNW/a9cutWnTRtWrV9eYMWNkt9u1b98+ffXVVzd93RdffKGWLVsqKipKo0aN0oULFzRlyhTVr19f27dvNxrUTp06qUyZMoqLi9P27ds1Z84chYWFZTpV6tChg3r37q1PPvlETz/9tKQrKWLFihV11113GccfOHBAy5cv16OPPqoyZcro+PHjmjVrlho1aqSff/5ZERERqlSpksaMGaNXXnlFzzzzjBo2bChJTj/L06dPq2XLlurcubOeeOKJGw7lTpo0SRs3blRsbKwSEhLk6+urWbNmad26dXr//fcVERGRqfd5u3bt2qX69eurZMmSevHFFxUYGKglS5aoXbt2WrZsmdq3by/pSvMeFxennj176p577lFSUpK+//57bd++XQ8++KCeffZZHT16VOvXr9f7779/23X5+vrq8ccf14gRI7Rlyxa1bt1akjRjxgxVqVJFDz30kPLly6eVK1fqueeeU0ZGhvr27StJmjhxop5//nkVLFhQL7/8sqT/H1LPzM8ZgIeygDzs3LlzliTr4YcfztTxO3bssCRZPXv2dNo/ZMgQS5K1ceNGx77IyEhLkhUfH+/Yd+LECctut1uDBw927Dt48KAlyXrjjTeczhkbG2tFRkYaNYwcOdK69qv5zjvvWJKskydP3rDuq9eYN2+eY1/NmjWtsLAw6/Tp0459P/74o+Xj42M99dRTxvWefvppp3O2b9/eKlKkyA2vee37CAwMtCzLsh555BGradOmlmVZVnp6uhUeHm6NHj36up9BamqqlZ6ebrwPu91ujRkzxrHvu+++M97bVY0aNbIkWTNnzrzuc40aNXLa9/nnn1uSrFdffdU6cOCAVbBgQatdu3Z/+x5v1cmTJy1J1siRIx37mjZtalWrVs1KTU117MvIyLDuu+8+q1y5co59NWrUsFq3bn3T8/ft29fKyl/jjRo1sqpUqXLD5z/99FNLkjVp0iTHvvPnzxvHNW/e3IqKinLaV6VKFePztqzM/5wBeB6Gm5GnJSUlSZIKFSqUqePXrFkjSRo0aJDT/sGDB0uSMXexcuXKjnRLkooVK6YKFSrowIEDt1zzX12dy/jvf/9bGRkZmXrNsWPHtGPHDnXr1k2hoaGO/dWrV9eDDz7oeJ/X6t27t9Pjhg0b6vTp047PMDO6dOmiTZs2KTExURs3blRiYuJ1h5qlK/MYfXyu/BWUnp6u06dPO4bSt2/fnulr2u12de/ePVPHNmvWTM8++6zGjBmjDh06yN/fX7Nmzcr0tW7XmTNntHHjRnXq1El//vmnTp06pVOnTun06dNq3ry59u7dq//973+Srvzcd+3apb179+ZYfVdT7j///NOxLyAgwPHnc+fO6dSpU2rUqJEOHDjgNCx9I9n1cwaQ82gSkacFBQVJcv4/vZs5dOiQfHx8nO5QlaTw8HCFhITo0KFDTvtLlSplnKNw4cL6448/brFi02OPPab69eurZ8+eKl68uDp37qwlS5bctGG8WmeFChWM5ypVqqRTp04pJSXFaf9f30vhwoUlKUvvpVWrVipUqJA++ugjLVq0SHfffbfxWV6VkZGhd955R+XKlZPdblfRokVVrFgx/fTTT5lqPq4qWbJklm5SefPNNxUaGqodO3Zo8uTJCgsL+9vXnDx5UomJiY4tOTk509e71r59+2RZlkaMGKFixYo5bSNHjpQknThxQpI0ZswYnT17VuXLl1e1atU0dOhQ/fTTT7d03cy6+r6u/UfVV199pZiYGMe81mLFijnmfWbm55RdP2cAOY8mEXlaUFCQIiIi9N///jdLr8vsDQC+vr7X3W9Z1i1fIz093elxQECA4uPj9cUXX+jJJ5/UTz/9pMcee0wPPvigceztuJ33cpXdbleHDh20YMECffrppzdMESVp3LhxGjRokO6//34tXLhQn3/+udavX68qVapkOjGVnJOuzPjhhx8cjdjOnTsz9Zq7775bJUqUcGy3st6jJMf7GjJkiNavX3/d7WpTff/992v//v2aO3euqlatqjlz5uiuu+7SnDlzbunamXH1e3K1hv3796tp06Y6deqU3n77ba1evVrr16/XwIEDnd7PzWTXzxlAzuPGFeR5bdq00ezZs5WQkKB69erd9NjIyEhlZGRo7969qlSpkmP/8ePHdfbsWcedytmhcOHCTncCX/XXtFKSfHx81LRpUzVt2lRvv/22xo0bp5dffllffvmlYmJirvs+JOmXX34xntuzZ4+KFi2qwMDA238T19GlSxfNnTtXPj4+6ty58w2PW7p0qZo0aaJ3333Xaf/Zs2dVtGhRx+NbvWP3elJSUtS9e3dVrlxZ9913nyZMmKD27ds77qC+kUWLFjktFB4VFXVL17/6uvz581/35/ZXoaGh6t69u7p3767k5GTdf//9GjVqlHr27Ckpez+b9PR0LV68WAUKFFCDBg0kXbnpKy0tTStWrHBKmr/88kvj9TeqJbM/ZwCehyQRed6wYcMUGBionj176vjx48bz+/fv16RJkyRdGS6Vrtytea23335bkhx3fGaHsmXL6ty5c05DiMeOHTPuoD5z5ozx2quLSv91WZ6rSpQooZo1a2rBggVOjeh///tfrVu3zvE+XaFJkyYaO3aspk6dqvDw8Bse5+vra6SUH3/8sWNO3lVXm9nrNdRZ9cILL+jw4cNasGCB3n77bZUuXVqxsbE3/Byvql+/vmJiYhzbrTaJYWFhaty4sWbNmqVjx44Zz19dU1O6ctf2tQoWLKjo6GinWrPrs0lPT1f//v21e/du9e/f3zFN42q6fO3P6dy5c5o3b55xjsDAwOvWkdmfMwDPQ5KIPK9s2bJavHixHnvsMVWqVMnpN658/fXX+vjjjx2/JaJGjRqKjY3V7NmzdfbsWTVq1EjffvutFixYoHbt2qlJkybZVlfnzp31wgsvqH379urfv7/Onz+vGTNmqHz58k4T+seMGaP4+Hi1bt1akZGROnHihKZPn6477rjDkfhczxtvvKGWLVuqXr166tGjh2MJnODg4Cz9ho6s8vHx0T//+c+/Pa5NmzYaM2aMunfvrvvuu087d+7UokWLjAasbNmyCgkJ0cyZM1WoUCEFBgaqbt26KlOmTJbq2rhxo6ZPn66RI0c6luSZN2+eGjdurBEjRmjChAlZOt+tmjZtmho0aKBq1aqpV69eioqK0vHjx5WQkKAjR4441g+sXLmyGjdurNq1ays0NFTff/+9li5d6vRbe2rXri1J6t+/v5o3by5fX9+bprfSlSZv4cKFkq4sPH71N67s379fnTt31tixYx3HNmvWTH5+fmrbtq2effZZJScn61//+pfCwsKMJrd27dqaMWOGXn31VUVHRyssLEwPPPBApn/OADyQO2+tBnLSr7/+avXq1csqXbq05efnZxUqVMiqX7++NWXKFKflSC5dumSNHj3aKlOmjJU/f37rzjvvtIYPH+50jGVdWQLnekuU/HXplRstgWNZlrVu3TqratWqlp+fn1WhQgVr4cKFxhI4GzZssB5++GErIiLC8vPzsyIiIqzHH3/c+vXXX41r/HWZmC+++MKqX7++FRAQYAUFBVlt27a1fv75Z6djrl7vr0vszJs3z5JkHTx48IafqWU5L4FzIzdaAmfw4MFWiRIlrICAAKt+/fpWQkLCdZeu+fe//21VrlzZypcvn9P7vNmSLteeJykpyYqMjLTuuusu69KlS07HDRw40PLx8bESEhJu+h5uxfWWwLEsy9q/f7/11FNPWeHh4Vb+/PmtkiVLWm3atLGWLl3qOObVV1+17rnnHiskJMQKCAiwKlasaL322mvWxYsXHcdcvnzZev75561ixYpZNpvtb5fDubpk0NWtYMGCVrly5awnnnjCWrdu3XVfs2LFCqt69eqWv7+/Vbp0aWv8+PHW3Llzjf82EhMTrdatW1uFChWyJDk++6z8nAF4FptlZWFWOgAAALwCcxIBAABgoEkEAACAgSYRAAAABppEAAAAGGgSAQAAYKBJBAAAgIEmEQAAAIY8+RtXzl3gl8YDeZUP/7QF8qxCdvd9wQNq9fv7g27RhR+muuzcrsRf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x5cuXdIPP/ygtWvXaujQodlVFwAAANwoy03iP/7xj+vunzZtmr7//vvbLggAACCnESSasnx38420bNlSy5Yty67TAQAAwI2y7caVpUuXKjQ0NLtOBwAAkGNy81I1rnJLi2lf+0FalqXExESdPHlS06dPz9biAAAA4B5ZbhIffvhhpybRx8dHxYoVU+PGjVWxYsVsLe5W2fNn2yg6AA9T+O5+7i4BgItc+GGq265N52DKcpM4atQoF5QBAAAAT5LlxtnX11cnTpww9p8+fVq+vr7ZUhQAAEBO4tfymbKcJFqWdd39aWlp8vPzu+2CAAAAcppP7u3lXCbTTeLkyZMlXem058yZo4IFCzqeS09PV3x8vMfMSQQAAMDtyXST+M4770i6kiTOnDnTaWjZz89PpUuX1syZM7O/QgAAABcjSTRlukk8ePCgJKlJkyb65JNPVLhwYZcVBQAAAPfK8pzEL7/80hV1AAAAuE1uvsHEVbJ8d3PHjh01fvx4Y/+ECRP06KOPZktRAAAAcK8sN4nx8fFq1aqVsb9ly5aKj4/PlqIAAAByko/NdVtuleUmMTk5+bpL3eTPn19JSUnZUhQAAADcK8tNYrVq1fTRRx8Z+z/88ENVrlw5W4oCAADISTab67bcKss3rowYMUIdOnTQ/v379cADD0iSNmzYoMWLF2vp0qXZXiAAAICr+eTmbs5Fstwktm3bVsuXL9e4ceO0dOlSBQQEqEaNGtq4caNCQ0NdUSMAAAByWJabRElq3bq1WrduLUlKSkrSBx98oCFDhmjbtm1KT0/P1gIBAABcLcvz77zALX8m8fHxio2NVUREhN566y098MAD+uabb7KzNgAAALhJlpLExMREzZ8/X++++66SkpLUqVMnpaWlafny5dy0AgAAci2mJJoynSS2bdtWFSpU0E8//aSJEyfq6NGjmjJliitrAwAAgJtkOkn87LPP1L9/f/Xp00flypVzZU0AAAA5irubTZlOErds2aI///xTtWvXVt26dTV16lSdOnXKlbUBAADATTLdJN57773617/+pWPHjunZZ5/Vhx9+qIiICGVkZGj9+vX6888/XVknAACAy7CYtinLdzcHBgbq6aef1pYtW7Rz504NHjxYr7/+usLCwvTQQw+5okYAAACX4nc3m25rWaAKFSpowoQJOnLkiD744IPsqgkAAABudkuL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\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}